// Code generated by protoc-gen-go.
// source: index.proto
// DO NOT EDIT!

/*
Package state is a generated protocol buffer package.

It is generated from these files:
	index.proto

It has these top-level messages:
	Node
	Service
	Services
	Index
*/
package state

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Node struct {
	Mod     int64 `protobuf:"varint,1,opt,name=Mod,json=mod" json:"Mod,omitempty"`
	Expiry  int64 `protobuf:"varint,2,opt,name=Expiry,json=expiry" json:"Expiry,omitempty"`
	Enabled bool  `protobuf:"varint,3,opt,name=Enabled,json=enabled" json:"Enabled,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Service struct {
	Mod   int64            `protobuf:"varint,1,opt,name=Mod,json=mod" json:"Mod,omitempty"`
	Nodes map[string]*Node `protobuf:"bytes,2,rep,name=Nodes,json=nodes" json:"Nodes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Raw   []byte           `protobuf:"bytes,3,opt,name=Raw,json=raw,proto3" json:"Raw,omitempty"`
}

func (m *Service) Reset()                    { *m = Service{} }
func (m *Service) String() string            { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()               {}
func (*Service) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Service) GetNodes() map[string]*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type Services struct {
	Services map[string]*Service `protobuf:"bytes,1,rep,name=Services,json=services" json:"Services,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Services) Reset()                    { *m = Services{} }
func (m *Services) String() string            { return proto.CompactTextString(m) }
func (*Services) ProtoMessage()               {}
func (*Services) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Services) GetServices() map[string]*Service {
	if m != nil {
		return m.Services
	}
	return nil
}

type Index struct {
	Services map[string]*Services `protobuf:"bytes,1,rep,name=Services,json=services" json:"Services,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Index) Reset()                    { *m = Index{} }
func (m *Index) String() string            { return proto.CompactTextString(m) }
func (*Index) ProtoMessage()               {}
func (*Index) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Index) GetServices() map[string]*Services {
	if m != nil {
		return m.Services
	}
	return nil
}

func init() {
	proto.RegisterType((*Node)(nil), "state.Node")
	proto.RegisterType((*Service)(nil), "state.Service")
	proto.RegisterType((*Services)(nil), "state.Services")
	proto.RegisterType((*Index)(nil), "state.Index")
}

var fileDescriptor0 = []byte{
	// 291 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x92, 0xcb, 0x4a, 0xc4, 0x30,
	0x18, 0x85, 0xc9, 0xc4, 0x5e, 0xfc, 0xeb, 0x8d, 0x2c, 0xa4, 0x16, 0x04, 0x2d, 0x0a, 0xb3, 0xaa,
	0x30, 0x82, 0xa8, 0xfb, 0x2e, 0xbc, 0x2e, 0xe2, 0x13, 0x64, 0x4c, 0x16, 0xc5, 0xb1, 0x19, 0x92,
	0x3a, 0x33, 0x7d, 0x08, 0x37, 0xbe, 0x83, 0xef, 0x69, 0x93, 0x06, 0x67, 0xa2, 0x23, 0xee, 0xce,
	0xdf, 0xd3, 0xff, 0x9c, 0x2f, 0x24, 0x90, 0x54, 0x35, 0x17, 0x8b, 0x62, 0xaa, 0x64, 0x23, 0x49,
	0xa0, 0x1b, 0xd6, 0x88, 0xfc, 0x16, 0x36, 0x1e, 0x25, 0x17, 0x64, 0x0f, 0xf0, 0x83, 0xe4, 0x29,
	0x3a, 0x42, 0x43, 0x4c, 0xf1, 0xab, 0xe4, 0x64, 0x1f, 0xc2, 0x72, 0x31, 0xad, 0x54, 0x9b, 0x0e,
	0xec, 0xc7, 0x50, 0xd8, 0x89, 0xa4, 0x10, 0x95, 0x35, 0x1b, 0x4f, 0x04, 0x4f, 0x71, 0x67, 0xc4,
	0x34, 0x12, 0xfd, 0x98, 0x7f, 0x22, 0x88, 0x9e, 0x84, 0x9a, 0x55, 0xcf, 0xeb, 0xf2, 0xce, 0x20,
	0x30, 0x4d, 0xba, 0x8b, 0xc3, 0xc3, 0x64, 0x74, 0x50, 0x58, 0x80, 0xc2, 0x2d, 0x14, 0xd6, 0x2b,
	0xeb, 0x46, 0xb5, 0x34, 0xa8, 0x8d, 0x36, 0x11, 0x94, 0xcd, 0x6d, 0xc9, 0x16, 0xc5, 0x8a, 0xcd,
	0xb3, 0x12, 0x60, 0xf9, 0x9b, 0xf1, 0x5f, 0x44, 0x6b, 0x2b, 0x36, 0xa9, 0x91, 0xe4, 0x18, 0x82,
	0x19, 0x9b, 0xbc, 0x09, 0x4b, 0x9c, 0x8c, 0x12, 0x57, 0x61, 0x76, 0x68, 0xef, 0x5c, 0x0f, 0x2e,
	0x51, 0xfe, 0x81, 0x20, 0x76, 0xb5, 0x9a, 0x5c, 0x2d, 0x75, 0x17, 0x65, 0xc8, 0x0e, 0x7d, 0x32,
	0xfd, 0x2d, 0x7a, 0xba, 0x58, 0xbb, 0x31, 0xbb, 0x83, 0x6d, 0xcf, 0x5a, 0x43, 0x74, 0xe2, 0x13,
	0xed, 0xf8, 0xd1, 0xab, 0x50, 0xef, 0x08, 0x82, 0x1b, 0x73, 0x3f, 0xe4, 0xe2, 0x17, 0x51, 0xe6,
	0xd6, 0xac, 0xff, 0x27, 0xce, 0xfd, 0xff, 0x38, 0xa7, 0x3e, 0xce, 0xee, 0x8f, 0x93, 0xae, 0xf0,
	0x8c, 0x43, 0xfb, 0x4c, 0xce, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x20, 0xa9, 0xce, 0x2f, 0x35,
	0x02, 0x00, 0x00,
}
